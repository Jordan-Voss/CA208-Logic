% A binary tree can be defined in terms of 2 predicates:
% emptyBT, the empty binary tree
% bTree(N,T1,T2) that is true if N is the root of a binary tree with left subtree T1 and right subtree T2, where all the items in T1 are less than or equal to N and all the items in T2 are greater than N.


% insert(I,T1,T2) is true if T2 is the binary tree resulting from I being inserted into binary tree T1
insert(I, emptyBT, bTree(I,emptyBT,emptyBT)).
insert(I, bTree(I, T1, T2), bTree(I, T1, T2)):-!.
insert(I, bTree(N, T1, T2), bTree(N, LeftNode, T2)):-I<N, !, insert(I, T1, LeftNode).
insert(I, bTree(N, T1, T2), bTree(N, L, RightNode)):- insert(I, T2, RightNode).

% preorder(T,L) is true if L is a list of nodes generated by a preorder traversal of the binary tree T
preorder(emptyBT, []).
preorder(bTree(N,T1,T2), L):- preorder(T1,L1),preorder(T2,L2), append(N|T1, T2, L).

% inorder(T,L) is true if L is a list of nodes generated by a inorder traversal of the binary tree T.
inorder(emptyBT, []).
inorder(bTree(N,T1,T2), L):-inorder(T1,L1), inorder(T2, L2),append(L1,[N|L2],L).

% postorder(T,L) is true if L is a list of nodes generated by a postorder traversal of the binary tree T.
postorder(btree(N,T1,T2),[]).
postorder(bTree(N,T1,T2), L):-postorder(T1,L1), postorder(T2,L2), append(L1,L2,R1), append(R1,[N],L).

% search(T,I) is true if I is contained in the binary tree T.
search(bTree(I,_,_),I).
search(bTree(N,T1,_),I):- I < N,!,search(T1,I).
search(btree(_,_,T2),I):- search(T2,I).

% height(T,H) is true if H is the height of the binary tree T. An empty tree has height 0 and a tree with one item has height 1.
highest_val(A, B, A):-A>B, !.
highest_val(_, B, B).

height(emptyBT, 0).
height(bTree(N,emptyBT,emptyBT),1).
height(bTree(_,T1,T2),Hght):- height(T1,HT1), height(T2,HT2), highest_val(HT1,HT2,HT3), Hght is HT3 + 1.
